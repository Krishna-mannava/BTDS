
import tensorflow as tf
import cv2
import os
import numpy as np
import imutils
from keras.applications.vgg16 import preprocess_input
def preprocess_imgs(set_name, img_size):
    """
    Resize and apply VGG-15 preprocessing
    """
    set_new = []
    for img in set_name:
        img = cv2.resize(
            img,
            dsize=img_size,
            interpolation=cv2.INTER_CUBIC
        )
# we use preprocess_input inorder to set the images to train the model  in keras
        set_new.append(preprocess_input(img))
    return np.array(set_new)
def crop_imgs(set_name, add_pixels_value=0):
    """
    Finds the extreme points on the image and crops the rectangular out of them
    """
    set_new = []
    for img in set_name:
#         cvtcolor for changing to gray images
# gaussian blur to make the surface smooth
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        gray = cv2.GaussianBlur(gray, (5, 5), 0)

#remove the noises by thresholding.......which seperates regions......
#erode which makes partial '0' to full
# dilate which makes patial '1' to full
        thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]
        thresh = cv2.erode(thresh, None, iterations=2)
        thresh = cv2.dilate(thresh, None, iterations=2)

        # find contours in thresholded image, then grab the largest one
        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        c = max(cnts, key=cv2.contourArea)

        # find the extreme points
        extLeft = tuple(c[c[:, :, 0].argmin()][0])
        extRight = tuple(c[c[:, :, 0].argmax()][0])
        extTop = tuple(c[c[:, :, 1].argmin()][0])
        extBot = tuple(c[c[:, :, 1].argmax()][0])

        ADD_PIXELS = add_pixels_value
        new_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS, extLeft[0]-ADD_PIXELS:extRight[0]+ADD_PIXELS].copy()
        set_new.append(new_img)

    return np.array(set_new)


def load_data(dir_path):
    X = []
    labels = dict()       
    img = cv2.imread(dir_path)
    X.append(img)
#     print(f'{len(X)} images loaded from {dir_path} directory.')
    return X

def getPrediction(filename):

    model = tf.keras.models.load_model('u.h5')
    TRAIN_DIR = 'D:/project/static/'+filename
    u = load_data(TRAIN_DIR)
    u = crop_imgs(set_name=u)
    IMG_SIZE = (224,224)
    u = preprocess_imgs(set_name=u, img_size=IMG_SIZE)
    predictions = model.predict(u)
    for i in predictions:
        if i<0.5 and i>=0:
           k=str(np.round((1-i)*100,2))
           return 'Hurray!!!  No need to worry!',TRAIN_DIR,'You\'re chances of Not having Brain Tumor  is ' + k[1:len(k)-1] + '%'
        if(i<=1 and i>=0.5):
           k=str(np.round(i*100,2))
           return 'Oops !!!  I’m very sorry!!!',TRAIN_DIR,'You\'re chance of being affected by  Brain Tumor '+k[1:len(k)-1] + '%'


app.py:

from flask import Flask
UPLOAD_FOLDER = 'D:/project/static'
app = Flask(__name__)
app.secret_key = "secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

index.py:

from flask import Flask, render_template, request, redirect, flash, url_for,send_file
from flask.helpers import make_response, send_file
import main
import pdfkit
import urllib.request
from app import app
from werkzeug.utils import secure_filename
from main import getPrediction
import os
lis=[]
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/', methods=['POST'])
def submit_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash('No file selected for uploading')
            return redirect(request.url)
        if file:
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))
            getPrediction(filename)
            label, path ,label1 = getPrediction(filename)
            flash(label)
            flash(filename)
            flash(label1)
            lis.append(label)
            lis.append(filename)
            lis.append(label1)
            return redirect('/')

@app.route('/info')
def info():
    return render_template('information.html')

@app.route('/download')
def download():
    if(len(lis)!=3):
        return render_template('information.html')
    else:
        if("Not" in lis[2]):
            stat = "No, There is no Tumor"
        else:
            stat="Yes, Tumor is Present"
        return render_template('pdf.html',label=lis[0],label1=lis[2],filename="../static/"+lis[1],status=stat)
@app.route('/download/save')
def save():
    pdf = pdfkit.from_file('../pdf.html','tumor_report.pdf')
    return send_file(pdf,as_attachment=True)
if __name__ == "__main__":
    app.run(host='0.0.0.0')


index.html:

<!DOCTYPE html>
<html>
	<head>
    <title>Brain Tumor Detection</title>
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style_5.css') }}">		
	</head>
	<body>
     <div class="u">
	<form method="post" action="/" enctype="multipart/form-data">
	<h1 style="text-align: center;margin: 40px;color:#000; background-color: rgb(129, 162, 255) ">Brain Tumor Detection System</h1>
<p style="text-align:right; padding-left:10px; color:rgb(255, 58, 58)">- Upload MRI Scan of Brain</p> 
<p style="border-bottom: 2px solid #adadad;
  position: relative;
  margin: 25px 0;"></p>
<p style="
  position: relative; 
  margin: 25px 0;">
	{% with messages = get_flashed_messages() %}
	  {% if messages %}
	<p style="text-align:center;
	font-weight:bold;
 font-family: 'Times New Roman', Times, serif;
font-size: 20px;">
	{{ messages[0] }}
		</p>
	<p style="text-align:center;
	font-weight:bold;

font-family: 'Times New Roman', Times, serif;
font-size: 20px;">
	{{ messages[2] }}
		</p>

	<p style="text-align:center;
  position: relative;
  margin: 25px 0;">
	    <img src= "{{url_for('static',filename=messages[1])}}" height="200" width="200" >
</p>
	  {% endif %}
	{% endwith %}
<p style="
  position: relative;
  margin: 20px 0;text-align:center;"><input style="width: 300px; margin: 0 auto;" type="file" name="file" autocomplete="off" required>	</p>
<p style="
  position: relative;
  margin: 10px 0;
border-top: 2px solid #adadad;"></p>
	<p style="text-align:center;"><input type="submit" class="b" value="Submit"/></p>
</form>
<a href=info>
		<button  style = "margin:8px;" type="submit" class="c">
			Information Desk
		</button>
</a>
<a href=download>
	<button  style = "margin:8px; float:right;" type="submit" class="e">
		Save Report
	</button>
</a> 
<form action="https://www.spineandneurosurgeryhospitalindia.com/blog/top-10-brain-tumor-surgeons-in-india/">
	<button style = "margin:8px;" type="submit" class="d">
		Suggested Surgeons/Hospitals
	</button>
</form>

</div>
	</body>
</html>






Information.html:

<!DOCTYPE html>
<html>
	<head>
    <title>Information Desk</title>
    <style>
        body
        {
          background-color:rgb(168, 255, 175);
        }
        
        img
        {
          display: block;
          margin-left: auto;
          margin-right: auto;
        }
        .d
{
  display: inline-block ;
  padding:5px;
  height: 40px;
  border: none;
  border-radius: 10px;
  background-color: #e60b4d;
  color: #fff;
  cursor: pointer;
  width: 320px;
}
        </style>
    </head>
<body>
<h2 style="text-align: center;margin: 50px;color:#000;">Brain Tumor Precautions and Remedies</h2>
<h3 style="color:rgb(25, 87, 255)">Brain Tumor</h3>
<p style=" margin: 25px 0; font-size:17px;">
Brain cancer is an overgrowth of cells in your brain that forms masses called tumors.
Cancerous, or malignant, brain tumors can grow very quickly, depending on the type of tumor.
They can disrupt the way your body works, and this can be life-threatening. 
However, brain cancer is quite uncommon. 
According to estimates from the American Cancer Society, people have less than a 1 percent chance of developing a malignant brain tumor in their lifetime.
</p>
<img src="{{'../static/css/Tumor.jpg'}}" alt="Paris" style="width:30%;" height= "250">
<h3 style="color:rgb(25, 87, 255)">What are the symptoms of brain tumor?</h3>
<p style= "font-size:17px;">The symptoms of brain cancer depend on the size and location of the tumor.<br>Common brain cancer symptoms include:</p>
<ul style= "font-size:17px;">
    <li>headaches that are usually worse in the morning</li>
    <li>nausea</li>
    <li>vomiting</li>
    <li> a lack of coordination</li>
    <li> a lack of balance</li>
    <li> difficulty walking</li>
    <li> memory lapses</li>
    <li>difficulty thinking</li>
    <li> speech problems</li>
    <li> vision problems</li>
    <li>  personality changes</li>
    <li> abnormal eye movements</li>
    <li> muscle jerking</li>
    <li> muscle twitching</li>
    <li>  unexplained passing out, or syncope</li>
    <li> drowsiness</li>
    <li> numbness or tingling in the arms or legs</li>
    <li> seizures</li>    
</ul>
<p style= "font-size:17px;">Many of the symptoms of brain cancer are also caused by other, less-serious conditions.There’s no need to panic if you’re experiencing these symptoms, but it’s a good idea to visit your doctor to have your symptoms investigated, just in case.</p>
</p>
<h3 style="color:rgb(25, 87, 255)">What are the complications associated with a brain tumor?</h3>
<p style= "font-size:17px;">Some people with a brain tumor — whether it is benign or malignant — experience complications as the tumor grows and presses on surrounding tissue.<br>These complications include:</p>
<ul style="font-size:17px">
    <li>Decreased alertness.</li>
    <li>Difficulty speaking.</li>
    <li>Faster or slower breathing and pulse rates.</li>
    <li> Numbness that interferes with feeling pressure, heat or cold on the body.</li>
    <li>  Weakness or inability to move a leg or arm on one side of the body.</li>
    <li> Vision, hearing and smelling problems.</li>
</ul>
<h3 style="color:rgb(25, 87, 255)">How can you prevent a brain tumor?</h3>
<p style= "font-size:17px;">You cannot prevent a brain tumor. You can reduce your risk of developing a brain tumor by avoiding environmental hazards such as smoking and excessive exposure to radiation.
</p>
<p style="font-size:19px; color:orangered">Reducing your risk of Brain Tumor
</p>
<p style= "font-size:17px;">There’s no way to prevent brain cancer, but you can reduce your risk of getting it if you:</p>
<ul style= "font-size:17px;">
<li>avoid exposure to pesticides and insecticides</li>
<li>avoid exposure to carcinogenic chemicals</li>
<li>avoid smoking</li>
<li>avoid unnecessary exposure to radiation</li>
</ul>

<h3 style="color:rgb(25, 87, 255)">Who is at risk of developing a brain tumor?</h3>
<p style="font-size:17px;">People who have higher risk for brain tumors include those who have:</p>
<ul style= "font-size:17px;">
<li>Family history of cancer.</li>
<li>Genetic mutation that causes abnormal cell growth.</li>
<li>Long-term exposure to radiation from X-rays or treatment for other cancers.</li>
<li>Exposure to certain chemicals (possible cause).</li>
</ul>

<h3 style="color:rgb(25, 87, 255)">What are the treatments for a brain tumor?</h3>
<p style="font-size:17px;">Brain tumor treatment depends on the tumor’s location, size and type. Doctors often use a combination of therapies to treat a tumor.
    <br>Your treatment options might include:</p>
<p style="font-size:17px;">Click the Below Button to know the various treatments for Brain Tumor:</p>
<form action="https://www.cancer.net/cancer-types/brain-tumor/types-treatment">
	<button style = "margin:8px;" type="submit" class="d">
        Brain Tumor: Types of Treatment
	</button>
</form>
<h3 style="color:rgb(25, 87, 255)">What questions should I ask my doctor?</h3>
<p style="font-size:17px;">If you have a brain tumor, you may want to ask your doctor:</p>
<ul style= "font-size:17px;">
    <li>Is the tumor malignant or benign?</li>
    <li>What kind of tumor do I have?</li>
    <li>What type of treatment is best for me?</li>
    <li> Will my treatment cause side effects?</li>
    </ul>
<br><hr><br>
<h2 style="text-align: center;margin: 50px;color:#000;">Brain Tumor Detection System</h2>
<h3 style="color:rgb(25, 87, 255)">System Introduction</h3>

<p style=" margin: 25px 0; font-size:17px;">
Our Brain Tumor Detection system is developed in Deep Learning using CNN. You can visit here to know more about cnn<a href="https://www.analyticsvidhya.com/blog/2021/05/convolutional-neural-networks-cnn/">CNN for Deep Learning</a>
our system has good accuracy in predicting the Brain Tumor in MRI scans.
</p>
<h3 style="color:rgb(25, 87, 255)">System Working</h3>
<ul style= "font-size:17px;">
  <li>First upload your MRI scan image.</li>
  <li>Click submit upon the uploading of MRI scan.</li>
  <li>Now see the Immediate result obtained.</li>
  <li>If you want any help or precautions regarding tumor click on Information Desk Button.</li>
  <li>If you want to visit Top surgeons for Brain Tumor Detection click on Suggested Doctors/Hospitals button.</li>
  <li> For seeing the Reports in a detailed Manner click show reports.</li>
  </ul>
</body>
</html>


pdf.html


<!DOCTYPE html>
<html>
	<head>
    <title>Brain Tumor Report</title>
    <style>
        body
        {
          background-color:rgb(168, 255, 175);
        }
        .center
         {
          margin-left: auto;
          margin-right: auto;
         }
         table,th,td
         {
            border-style: outset;
            border-color: crimson;
            border-width:10px;
            border-collapse: collapse;
            width: 93%;
         }
         .d
{
  display: inline-block ;
  padding:5px;
  height: 40px;
  border: none;
  border-radius: 10px;
  background-color: #e60b4d;
  color: #fff;
  cursor: pointer;
  width: 150px;
}
.d:hover
{
  background-position: left center;
}
        </style>
    </head>
<body>
    
    <h2 style="text-align: center;margin: 50px;color:rgb(0, 0, 0);border-style: outset;border-width:10px; border-color:rgb(255, 43, 43)">Brain Tumor Report</h2>
    <table class=center>
        <tr>
          <th style="width:30%"><br>Patient Report Status<br></th>
          <td style="text-align:center;font-size:22px">{{label}}</td>
        </tr>
        <tr>
          <th style="width:30%"><br>Brain Tumor Status<br></th>
          <td style="text-align:center; font-size:22px">{{status}}</td>
        </tr>
        <tr>
          <th style="width:30%"><br>Brain Tumor Chance(%)<br></th>
          <td style="text-align:center; font-size:22px">{{label1}}</td>
        </tr>
        <tr>
          <th style="width:30%">Processed Brain MRI scan</th>
          <td style="text-align:center"><img src="{{filename}}" alt="paris" height="300" width="300" ></td>
        </tr>
      </table>
      <a href="download/save">
        <button style = "margin:8px;" type="submit" class="d">
          Save Report
        </button>
      </a>
</body>
</html>
import os as o
import shutil import matplotlib.pyplot as plotter.
 import cv2 import numpy as np
 import imutils as mts
 from keras.applications.vgg16 import preprocess_input 
from keras.preprocessing.image import ImageDataGenerator 
random_val= 123 
from keras.applications.vgg16 import VGG16
 from keras.models import Model, Sequential 
from keras import layers 
from keras.optimizers import Adam, RMSprop 
from keras.callbacks import EarlyStopping 
from sklearn.metrics import accuracy_score, confusion_matrix 
size_of_image= (224,224) 
!mkdir TRAIN TEST VAL TRAIN\YES TRAIN\NO TEST\YES TEST\NO VAL\YES VAL\NO
IMG_PATH = 'brain_tumor_dataset/' 
#split the data by train/val/test 
for CLASS in olistdir(IMG_PATH): 
# print(CLASS) 
# if not CLASS.startswith('.'): 
print(CLASS) 
IMG_NUM = len(olistdir(IMG_PATH + CLASS)) 
# print(IMG_NUM) 
for (n, FILE_NAME) in enumerate(olistdir(IMG_PATH + CLASS)): 
# print(n,FILE_NAME) img = IMG_PATH + CLASS + '/' + FILE_NAME 
if n < 5: 
shutil.copy(img, 'TEST/' + CLASS.upper() + '/' + FILE_NAME) 
elif n < 0.8*IMG_NUM: 
shutil.copy(img, 'TRAIN/'+ CLASS.upper() + '/' + FILE_NAME) 
else: 
shutil.copy(img, 'VAL/'+ CLASS.upper() + '/' + FILE_NAME)

def load_data(dir_path): 
X = [] 
y = [] 
i = 0 
labels = dict() 
for path in olistdir(dir_path): 
if not path.startswith('.'): 
labels[i] = path 
for file in olistdir(dir_path + path): 
if not file.startswith('.'): 
img = cv2.imread(dir_path + path + '/' + file) 
X.append(img) 
y.append(i) 
i += 1 
print(y) 
print(labels) 
X = np.array(X) 
y = np.array(y) 
print(y) print(f'{len(X)} images loaded from {dir_path} directory.')
			return X, y, labels
	
	TRAIN_DIR = 'TRAIN/' 
TEST_DIR = 'TEST/' 
VAL_DIR = 'VAL/' 
# use predefined function to load the image data into workspace 
X_train, y_train, labels = load_data(TRAIN_DIR)
 X_test, y_test, _ = load_data(TEST_DIR) 
X_val, y_val, _ = load_data(VAL_DIR)

def plot_samples(X, y, labels_dict, n=50): 
""" Creates a gridplot for desired number of images (n) from the specified se """ 
for index in range(len(labels_dict)): 
imgs = X[np.argwhere(y == index)][:n] 
j = 10 
i = int(n/j) 

plotter.figure(figsize=(15,6)) 
c = 1 
for img in imgs: 
plotter.subplot(i,j,c) 
plotter.imshow(img[0]) 

plotter.xticks([]) 
plotter.yticks([]) 
c += 1 
plotter.suptitle('Tumor: {}'.format(labels_dict[index]))
plotter.show()
plot_samples(X_train, y_train, labels, 30)


def crop_imgs(set_name, add_pixels_value=0): 
""" 
Finds the extreme points on the image and crops the rectangular out of th 
""" 
set_new = [] 
for img in set_name: 
# cvtcolor for changing to gray images 
# gaussian blur to make the surface smooth 
gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) 
gray = cv2.GaussianBlur(gray, (5, 5), 0) 
#remove the noises by thresholding.......which seperates regions...... 
#erode which makes partial '0' to full 
# dilate which makes patial '1' to full 
thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1] 
thresh = cv2.erode(thresh, None, iterations=2) 
thresh = cv2.dilate(thresh, None, iterations=2) 
# find contours in thresholded image, then grab the largest one 
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_A 
cnts = mtsgrab_contours(cnts) 
c = max(cnts, key=cv2.contourArea) 

# find the extreme points 
extLeft = tuple(c[c[:, :, 0].argmin()][0]) 
extRight = tuple(c[c[:, :, 0].argmax()][0]) 
extTop = tuple(c[c[:, :, 1].argmin()][0]) 
extBot = tuple(c[c[:, :, 1].argmax()][0]) 

ADD_PIXELS = add_pixels_value 
new_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS,extLeft[0]-A set_new.append(new_img) 
return np.array(set_new)

# apply this for each set 
X_train_crop = crop_imgs(set_name=X_train) 
X_val_crop = crop_imgs(set_name=X_val) 
X_test_crop = crop_imgs(set_name=X_test)

plot_samples(X_train_crop, y_train, labels, 30)

 def save_new_images(x_set, y_set, folder_name): 
i = 0 
for (img, imclass) in zip(x_set, y_set): 
if imclass == 0: 
cv2.imwrite(folder_name+'NO/'+str(i)+'.jpg',img) 
else: 
cv2.imwrite(folder_name+'YES/'+str(i)+'.jpg', img)
	i += 1
# saving new images to the folder 
!mkdir TRAIN_CROP TEST_CROP VAL_CROP TRAIN_CROP\YES TRAIN_CROP\NO TEST_CROP\Y save_new_images(X_train_crop, y_train, folder_name='TRAIN_CROP/') 
save_new_images(X_val_crop, y_val, folder_name='VAL_CROP/') 
save_new_images(X_test_crop, y_test, folder_name='TEST_CROP/')

def preprocess_imgs(set_name, size_of_image): 
""" 
Resize and apply VGG-15 preprocessing 
""" 
set_new = [] 
for img in set_name: 
img = cv2.resize( 
img, 
dsize=size_of_image, 
interpolation=cv2.INTER_CUBIC 
) 
# we use preprocess_input inorder to set the images to train the model in ke set_new.append(preprocess_input(img)) 
return np.array(set_new)

TRAIN_DIR = 'TRAIN_CROP/' 
VAL_DIR = 'VAL_CROP/' 
train_datagen = ImageDataGenerator( 
rotation_range=15, 
width_shift_range=0.1, 
height_shift_range=0.1, 
shear_range=0.1, 
brightness_range=[0.5,1.5], 
horizontal_flip=True, 
vertical_flip=True, 
preprocessing_function=preprocess_input 
) 
test_datagen = ImageDataGenerator( 
preprocessing_function=preprocess_input 
) 
print(test_datagen) t
rain_generator=train_datagen.flow_from_directory( 
TRAIN_DIR, 
color_mode='rgb', 
target_size=SIZE_OF_IMAGE, 
batch_size=32, 
#we are augumenting only 32 images from 193 images..to aug c
lass_mode='binary', 
seed=random_val
# , save_to_dir='preview', save_prefix='aug_img', save_format='jpg' 
)
 validation_generator = test_datagen.flow_from_directory(
	VAL_DIR, 
color_mode='rgb', 
target_size=SIZE_OF_IMAGE, 
batch_size=16, 
class_mode='binary', 
seed=RANDOM_SEED
)

img = cv2.imread('brain_tumor_dataset/yes/Y108.jpg') 
img = cv2.resize( 
img, 
dsize=SIZE_OF_IMAGE, 
interpolation=cv2.INTER_CUBIC 
) 
gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) 
gray = cv2.GaussianBlur(gray, (5, 5), 0) 

# threshold the image, then perform a series of erosions + 
# dilations to remove any small regions of noise 
thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1] 
thresh = cv2.erode(thresh, None, iterations=2) 
thresh = cv2.dilate(thresh, None, iterations=2) 
# find contours in thresholded image, then grab the largest one 
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SI 
cnts = mtsgrab_contours(cnts) c = max(cnts, key=cv2.contourArea) 
# find the extreme points 
extLeft = tuple(c[c[:, :, 0].argmin()][0]) 
extRight = tuple(c[c[:, :, 0].argmax()][0]) 
extTop = tuple(c[c[:, :, 1].argmin()][0]) 
extBot = tuple(c[c[:, :, 1].argmax()][0]) 
# add contour on the image 
img_cnt = cv2.drawContours(img.copy(), [c], -1, (0, 255, 255), 4) 
# add extreme points 
img_pnt = cv2.circle(img_cnt.copy(), extLeft, 8, (0, 0, 255),-1) 
img_pnt = cv2.circle(img_pnt, extRight, 8, (0, 255, 0), -1) 
img_pnt = cv2.circle(img_pnt, extTop, 8, (255, 0, 0), -1) 
img_pnt = cv2.circle(img_pnt, extBot, 8, (255, 255, 0), -1) 
# crop 
ADD_PIXELS = 0
 new_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS, extLeft[0]-ADD_PIXEL
plotter.figure(figsize=(15,6)) 
plotter.subplot(141) 
plotter.imshow(img) 
plotter.xticks([]) 
plotter.yticks([]) 
plotter.title('Step 1. Get the original image') 
plotter.subplot(142) 
plotter.imshow(img_cnt) 
plotter.xticks([]) 
plotter.yticks([]) 
plotter.title('Step 2. Find the biggest contour') 
plotter.subplot(143) 
plotter.imshow(img_pnt) 
plotter.xticks([]) 
plotter.yticks([]) 
plotter.title('Step 3. Find the extreme points') 
plotter.subplot(144) 
plotter.imshow(new_img) 
plotter.xticks([]) 
plotter.yticks([]) 
plotter.title('Step 4. Crop the image')
plotter.show()
# set the paramters we want to change randomly 
demo_datagen = ImageDataGenerator( 
rotation_range=15, 
width_shift_range=0.05, 
height_shift_range=0.05, 
rescale=1./255, 
shear_range=0.05, 
brightness_range=[0.1, 1.5], 
horizontal_flip=True, 
vertical_flip=True
)
vgg16_weight_path='vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5' #      vgg16_weight_path=None 
base_model = VGG16( 
weights=vgg16_weight_path, 
include_top=False, 
input_shape=SIZE_OF_IMAGE + (3,)
)
NUM_CLASSES = 1 
model=Sequential() 
model.add(base_model) 
model.add(layers.Flatten()) 
model.add(layers.Dropout(0.5)) 
model.add(layers.Dense(NUM_CLASSES, activation='sigmoid')) 
model.layers[0].trainable=False 
model.compile( l
loss='binary_crossentropy', 
optimizer=RMSprop(lr=1e-4), 
metrics=['accuracy']
) 
model.summary()
EPOCHS = 30 
es = EarlyStopping( 
monitor='val_acc', 
mode='max', 
patience=6 
) 
history = model.fit_generator(
train_generator, 
steps_per_epoch=50, 
epochs=EPOCHS, v
validation_data=validation_generator, 
validation_steps=25, callbacks=[es]
)
# plot model performance 
acc = history.history['accuracy'] 
val_acc = history.history['val_accuracy'] 
loss = history.history['loss'] 
val_loss = history.history['val_loss'] 
epochs_range = range(1, len(history.epoch) + 1) 
plotter.figure(figsize=(15,5))
 plotter.subplot(1, 2, 1) 
plotter.plot(epochs_range, acc, label='Train Set') 
plotter.plot(epochs_range, val_acc, label='Val Set') 
plotter.legend(loc="best") 
plotter.xlabel('Epochs') 
plotter.ylabel('Accuracy') 
plotter.title('Model Accuracy') 
plotter.subplot(1, 2, 2) 
plotter.plot(epochs_range, loss, label='Train Set')
plotter.plot(epochs_range, val_loss, label='Val Set') 
plotter.legend(loc="best") 
plotter.xlabel('Epochs') 
plotter.ylabel('Loss') 
plotter.title('Model Loss')
plotter.tight_layout() 
plotter.show()
def plot_confusion_matrix(cm, classes, 
normalize=False, 
title='Confusion matrix',
 cmap=plotter.cm.Blues): 
""" 
This function prints and plots the confusion matrix. Normalization can be applied by setting `normalize=True`. 
""" 
plotter.figure(figsize = (6,6)) 
plotter.imshow(cm, interpolation='nearest', cmap=cmap) 
plotter.title(title) 
plotter.colorbar() t
tick_marks = np.arange(len(classes))
 plotter.xticks(tick_marks, classes, rotation=90) 
plotter.yticks(tick_marks, classes) 
if normalize: 
cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis] 
thresh = cm.max() / 2. 
cm = np.round(cm,2) 
for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])): 
plotter.text(j, i, cm[i, j], 
horizontalalignment="center", 
color="white" if cm[i, j] > thresh else "black") 
            plotter.tight_layout() 
            plotter.ylabel('True label') 
            plotter.xlabel('Predicted label') 
            plotter.show()
# validate on val set 
predictions = model.predict(X_val_prep) 
predictions = [1 if x>0.5 else 0 for x in predictions] 
acc = accuracy_score(y_val, predictions) 
print('Validation Accuracy%.2f' % acc) 
confusion_mtx = confusion_matrix(y_val, predictions) 
cm = plot_confusion_matrix(confusion_mtx, classes = list(labels.items()),)
# validate on test set 
predictions = model.predict(X_test_prep) 
predictions = [1 if x>0.5 else 0 for x in predictions] 
acc = accuracy_score(y_test, predictions) 
print('Test Accuracy%.2f' % acc) 
confusion_mtx = confusion_matrix(y_test, predictions) 
cm = plot_confusion_matrix(confusion_mtx, )
classes = list(labels.items()), 
ind_list = np.argwhere((y_test == predictions) == False)[:,-1] 
if ind_list.size == 0: 
print('There are no missclassified images.') 
else: 
for i in ind_list: 
 	plotter.figure() plotter.imshow(X_test_crop[i])
             	plotter.xticks([]) 
             	plotter.yticks([]) 
plotter.title(f'Actual class: {y_val[i]}\nPredicted class: {predictions[j]}
plotter.show()

model.save('brain_tumor_detection.h5')
model.save('u.h5')










